import os
import cv2
import face_recognition
import pickle
import numpy as np

# === C·∫§U H√åNH TH∆Ø M·ª§C ===
IMAGE_FOLDER = "dataset_khautr"  # Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒëeo kh·∫©u trang
ENCODED_FOLDER = "encoded_khautr"  # Th∆∞ m·ª•c l∆∞u ƒë·∫∑c ƒëi·ªÉm khu√¥n m·∫∑t ƒë√£ tr√≠ch xu·∫•t

# === B∆Ø·ªöC 1: TR√çCH XU·∫§T ƒê·∫∂C ƒêI·ªÇM KHU√îN M·∫∂T ===
def extract_face_encodings():
    if not os.path.exists(ENCODED_FOLDER):
        os.makedirs(ENCODED_FOLDER)

    known_face_encodings = []
    known_face_names = []

    files = [f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
    if not files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh trong th∆∞ m·ª•c!")
        return

    for filename in files:
        path = os.path.join(IMAGE_FOLDER, filename)
        print(f"üñº ƒêang x·ª≠ l√Ω ·∫£nh: {filename}...")

        image = face_recognition.load_image_file(path)
        face_encodings = face_recognition.face_encodings(image)

        if face_encodings:
            encoding = face_encodings[0]
            name = os.path.splitext(filename)[0]

            known_face_encodings.append(encoding)
            known_face_names.append(name)

            with open(os.path.join(ENCODED_FOLDER, f"{name}.pkl"), "wb") as f:
                pickle.dump({"name": name, "encoding": encoding}, f)

            print(f"‚úî ƒê√£ l∆∞u khu√¥n m·∫∑t c·ªßa '{name}'.")

    print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(known_face_encodings)} khu√¥n m·∫∑t t·ª´ '{IMAGE_FOLDER}'.")

# === B∆Ø·ªöC 2: NH·∫¨N DI·ªÜN KHU√îN M·∫∂T T·ª™ CAMERA ===
def recognize_faces():
    known_face_encodings = []
    known_face_names = []

    encoded_files = [f for f in os.listdir(ENCODED_FOLDER) if f.endswith(".pkl")]

    if not encoded_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu khu√¥n m·∫∑t trong '{ENCODED_FOLDER}'!")
        return

    print(f"üìÇ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ th∆∞ m·ª•c '{ENCODED_FOLDER}'...")
    for file in encoded_files:
        with open(os.path.join(ENCODED_FOLDER, file), "rb") as f:
            data = pickle.load(f)
            known_face_encodings.append(data["encoding"])
            known_face_names.append(data["name"])

    print(f"‚úî ƒê√£ t·∫£i {len(known_face_encodings)} khu√¥n m·∫∑t.")

    video_capture = cv2.VideoCapture(0)

    if not video_capture.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
        return

    while True:
        ret, frame = video_capture.read()
        if not ret:
            print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ camera!")
            break

        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            name = "Unknown"

            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)

            if matches[best_match_index]:
                name = known_face_names[best_match_index]

            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

        cv2.imshow("Face Recognition", frame)

        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    video_capture.release()
    cv2.destroyAllWindows()

# === CH·∫†Y CH∆Ø∆†NG TR√åNH ===
if __name__ == "__main__":
    print("\nüöÄ B∆∞·ªõc 1: Tr√≠ch xu·∫•t ƒë·∫∑c ƒëi·ªÉm khu√¥n m·∫∑t...")
    extract_face_encodings()

    print("\nüé• B∆∞·ªõc 2: Nh·∫≠n di·ªán khu√¥n m·∫∑t t·ª´ camera...")
    recognize_faces()
